{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { uiActions } from \"./ui-slice\";\nconst cartSlice = createSlice({\n  name: \"cart\",\n  initialState: {\n    items: [],\n    totalQuantity: 0 // totalAmount: 0,\n\n  },\n  reducers: {\n    addItemToCart(state, action) {\n      const newItem = action.payload; //   searching if item we are pushig in to cart already exists\n\n      const existingItem = state.items.find(item => item.id === newItem.id);\n      state.totalQuantity++;\n\n      if (!existingItem) {\n        state.items.push({\n          id: newItem.id,\n          name: newItem.title,\n          price: newItem.price,\n          quantity: 1,\n          totalPrice: newItem.price\n        });\n      } else {\n        existingItem.quantity += 1;\n        existingItem.totalPrice += newItem.price;\n      }\n    },\n\n    removeItemFromCart(state, action) {\n      const id = action.payload;\n      const existingItem = state.items.find(item => item.id === id);\n      state.totalQuantity--;\n\n      if (existingItem.quantity === 1) {\n        //   will keep all the items whose id does not matches with the current item id\n        state.items = state.items.filter(item => item.id !== id);\n      } else {\n        existingItem.quantity -= 1;\n        existingItem.totalPrice -= existingItem.price;\n      }\n    }\n\n  }\n});\nexport const sendCartData = cart => {\n  return async dispatch => {\n    dispatch(uiActions.showNotification({\n      status: \"pending\",\n      title: \"Sending\",\n      message: \"Sending cart data\"\n    }));\n\n    const sendRequest = async () => {\n      const response = await fetch(\"https://react-http-32e62-default-rtdb.firebaseio.com/cart.json\", {\n        method: \"PUT\",\n        body: JSON.stringify(cart)\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Sending Cart Data Failed!!!\");\n      }\n    };\n\n    try {\n      await sendRequest();\n      dispatch(uiActions.showNotification({\n        status: \"success\",\n        title: \"Success!\",\n        message: \"Sent cart data successfully!\"\n      }));\n    } catch (error) {\n      dispatch(uiActions.showNotification({\n        status: \"error\",\n        title: \"Error!\",\n        message: \"Sending cart data failed!!!\"\n      }));\n    }\n  };\n};\nexport const fetchCartData = () => {\n  return async dispatch => {\n    const fetchData = async () => {\n      const response = await fetch(\"https://react-http-32e62-default-rtdb.firebaseio.com/cart.json\");\n\n      if (!response.ok) {\n        throw new Error(\"Could not fetch data!\");\n      }\n\n      const data = await response.json();\n      return data;\n    };\n\n    try {\n      await fetchData();\n    } catch (error) {\n      dispatch(uiActions.showNotification({\n        status: \"error\",\n        title: \"Error!\",\n        message: \"Fetching cart data failed!!!\"\n      }));\n    }\n  };\n};\nexport const cartActions = cartSlice.actions;\nexport default cartSlice;","map":{"version":3,"sources":["/home/mtech/Documents/ReactJS Training/MealOrderingRedux/src/store/cart-slice.js"],"names":["createSlice","uiActions","cartSlice","name","initialState","items","totalQuantity","reducers","addItemToCart","state","action","newItem","payload","existingItem","find","item","id","push","title","price","quantity","totalPrice","removeItemFromCart","filter","sendCartData","cart","dispatch","showNotification","status","message","sendRequest","response","fetch","method","body","JSON","stringify","ok","Error","error","fetchCartData","fetchData","data","json","cartActions","actions"],"mappings":"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","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport { uiActions } from \"./ui-slice\";\n\nconst cartSlice = createSlice({\n  name: \"cart\",\n  initialState: {\n    items: [],\n    totalQuantity: 0,\n    // totalAmount: 0,\n  },\n  reducers: {\n    addItemToCart(state, action) {\n      const newItem = action.payload;\n\n      //   searching if item we are pushig in to cart already exists\n      const existingItem = state.items.find((item) => item.id === newItem.id);\n\n      state.totalQuantity++;\n\n      if (!existingItem) {\n        state.items.push({\n          id: newItem.id,\n          name: newItem.title,\n          price: newItem.price,\n          quantity: 1,\n          totalPrice: newItem.price,\n        });\n      } else {\n        existingItem.quantity += 1;\n        existingItem.totalPrice += newItem.price;\n      }\n    },\n    removeItemFromCart(state, action) {\n      const id = action.payload;\n      const existingItem = state.items.find((item) => item.id === id);\n      state.totalQuantity--;\n\n      if (existingItem.quantity === 1) {\n        //   will keep all the items whose id does not matches with the current item id\n        state.items = state.items.filter((item) => item.id !== id);\n      } else {\n        existingItem.quantity -= 1;\n        existingItem.totalPrice -= existingItem.price;\n      }\n    },\n  },\n});\n\nexport const sendCartData = (cart) => {\n  return async (dispatch) => {\n    dispatch(\n      uiActions.showNotification({\n        status: \"pending\",\n        title: \"Sending\",\n        message: \"Sending cart data\",\n      })\n    );\n\n    const sendRequest = async () => {\n      const response = await fetch(\n        \"https://react-http-32e62-default-rtdb.firebaseio.com/cart.json\",\n        {\n          method: \"PUT\",\n          body: JSON.stringify(cart),\n        }\n      );\n      if (!response.ok) {\n        throw new Error(\"Sending Cart Data Failed!!!\");\n      }\n    };\n\n    try {\n      await sendRequest();\n      dispatch(\n        uiActions.showNotification({\n          status: \"success\",\n          title: \"Success!\",\n          message: \"Sent cart data successfully!\",\n        })\n      );\n    } catch (error) {\n      dispatch(\n        uiActions.showNotification({\n          status: \"error\",\n          title: \"Error!\",\n          message: \"Sending cart data failed!!!\",\n        })\n      );\n    }\n  };\n};\n\nexport const fetchCartData = () => {\n  return async (dispatch) => {\n    const fetchData = async () => {\n      const response = await fetch(\n        \"https://react-http-32e62-default-rtdb.firebaseio.com/cart.json\"\n      );\n\n      if (!response.ok) {\n        throw new Error(\"Could not fetch data!\");\n      }\n\n      const data = await response.json();\n\n      return data;\n    };\n\n    try {\n      await fetchData();\n    } catch (error) {\n      dispatch(\n        uiActions.showNotification({\n          status: \"error\",\n          title: \"Error!\",\n          message: \"Fetching cart data failed!!!\",\n        })\n      );\n    }\n  };\n};\n\nexport const cartActions = cartSlice.actions;\n\nexport default cartSlice;\n"]},"metadata":{},"sourceType":"module"}