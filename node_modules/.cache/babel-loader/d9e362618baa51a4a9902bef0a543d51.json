{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst cartSlice = createSlice({\n  name: \"cart\",\n  initialState: {\n    items: [],\n    totalQuantity: 0 // totalAmount: 0,\n\n  },\n  reducers: {\n    addItemToCart(state, action) {\n      const newItem = action.payload; //   searching if item we are pushig in to cart already exists\n\n      const existingItem = state.items.find(item => item.id === newItem.id);\n      state.totalQuantity++;\n\n      if (!existingItem) {\n        state.items.push({\n          id: newItem.id,\n          name: newItem.title,\n          price: newItem.price,\n          quantity: 1,\n          totalPrice: newItem.price\n        });\n      } else {\n        existingItem.quantity += 1;\n        existingItem.totalPrice += newItem.price;\n      }\n    },\n\n    removeItemFromCart(state, action) {\n      const id = action.payload;\n      const existingItem = state.items.find(item => item.id === id);\n      state.totalQuantity--;\n\n      if (existingItem.quantity === 1) {\n        //   will keep all the items whose id does not matches with the current item id\n        state.items = state.items.filter(item => item.id !== id);\n      } else {\n        existingItem.quantity -= 1;\n        existingItem.totalPrice -= existingItem.price;\n      }\n    }\n\n  }\n});\nexport const cartActions = cartSlice.actions;\nexport default cartSlice;","map":{"version":3,"sources":["/home/mtech/Documents/ReactJS Training/MealOrderingRedux/src/store/cart-slice.js"],"names":["createSlice","cartSlice","name","initialState","items","totalQuantity","reducers","addItemToCart","state","action","newItem","payload","existingItem","find","item","id","push","title","price","quantity","totalPrice","removeItemFromCart","filter","cartActions","actions"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,MAAMC,SAAS,GAAGD,WAAW,CAAC;AAC5BE,EAAAA,IAAI,EAAE,MADsB;AAE5BC,EAAAA,YAAY,EAAE;AACZC,IAAAA,KAAK,EAAE,EADK;AAEZC,IAAAA,aAAa,EAAE,CAFH,CAGZ;;AAHY,GAFc;AAO5BC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,aAAa,CAACC,KAAD,EAAQC,MAAR,EAAgB;AAC3B,YAAMC,OAAO,GAAGD,MAAM,CAACE,OAAvB,CAD2B,CAG3B;;AACA,YAAMC,YAAY,GAAGJ,KAAK,CAACJ,KAAN,CAAYS,IAAZ,CAAkBC,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYL,OAAO,CAACK,EAA/C,CAArB;AAEAP,MAAAA,KAAK,CAACH,aAAN;;AAEA,UAAI,CAACO,YAAL,EAAmB;AACjBJ,QAAAA,KAAK,CAACJ,KAAN,CAAYY,IAAZ,CAAiB;AACfD,UAAAA,EAAE,EAAEL,OAAO,CAACK,EADG;AAEfb,UAAAA,IAAI,EAAEQ,OAAO,CAACO,KAFC;AAGfC,UAAAA,KAAK,EAAER,OAAO,CAACQ,KAHA;AAIfC,UAAAA,QAAQ,EAAE,CAJK;AAKfC,UAAAA,UAAU,EAAEV,OAAO,CAACQ;AALL,SAAjB;AAOD,OARD,MAQO;AACLN,QAAAA,YAAY,CAACO,QAAb,IAAyB,CAAzB;AACAP,QAAAA,YAAY,CAACQ,UAAb,IAA2BV,OAAO,CAACQ,KAAnC;AACD;AACF,KArBO;;AAsBRG,IAAAA,kBAAkB,CAACb,KAAD,EAAQC,MAAR,EAAgB;AAChC,YAAMM,EAAE,GAAGN,MAAM,CAACE,OAAlB;AACA,YAAMC,YAAY,GAAGJ,KAAK,CAACJ,KAAN,CAAYS,IAAZ,CAAkBC,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYA,EAAvC,CAArB;AACAP,MAAAA,KAAK,CAACH,aAAN;;AAEA,UAAIO,YAAY,CAACO,QAAb,KAA0B,CAA9B,EAAiC;AAC/B;AACAX,QAAAA,KAAK,CAACJ,KAAN,GAAcI,KAAK,CAACJ,KAAN,CAAYkB,MAAZ,CAAoBR,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYA,EAAzC,CAAd;AACD,OAHD,MAGO;AACLH,QAAAA,YAAY,CAACO,QAAb,IAAyB,CAAzB;AACAP,QAAAA,YAAY,CAACQ,UAAb,IAA2BR,YAAY,CAACM,KAAxC;AACD;AACF;;AAlCO;AAPkB,CAAD,CAA7B;AA6CA,OAAO,MAAMK,WAAW,GAAGtB,SAAS,CAACuB,OAA9B;AAEP,eAAevB,SAAf","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nconst cartSlice = createSlice({\n  name: \"cart\",\n  initialState: {\n    items: [],\n    totalQuantity: 0,\n    // totalAmount: 0,\n  },\n  reducers: {\n    addItemToCart(state, action) {\n      const newItem = action.payload;\n\n      //   searching if item we are pushig in to cart already exists\n      const existingItem = state.items.find((item) => item.id === newItem.id);\n\n      state.totalQuantity++;\n\n      if (!existingItem) {\n        state.items.push({\n          id: newItem.id,\n          name: newItem.title,\n          price: newItem.price,\n          quantity: 1,\n          totalPrice: newItem.price,\n        });\n      } else {\n        existingItem.quantity += 1;\n        existingItem.totalPrice += newItem.price;\n      }\n    },\n    removeItemFromCart(state, action) {\n      const id = action.payload;\n      const existingItem = state.items.find((item) => item.id === id);\n      state.totalQuantity--;\n\n      if (existingItem.quantity === 1) {\n        //   will keep all the items whose id does not matches with the current item id\n        state.items = state.items.filter((item) => item.id !== id);\n      } else {\n        existingItem.quantity -= 1;\n        existingItem.totalPrice -= existingItem.price;\n      }\n    },\n  },\n});\n\nexport const cartActions = cartSlice.actions;\n\nexport default cartSlice;"]},"metadata":{},"sourceType":"module"}