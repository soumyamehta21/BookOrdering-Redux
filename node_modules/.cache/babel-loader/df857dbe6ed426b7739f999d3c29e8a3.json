{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { uiActions } from \"./ui-slice\";\nconst cartSlice = createSlice({\n  name: \"cart\",\n  initialState: {\n    items: [],\n    totalQuantity: 0,\n    changed: false // totalAmount: 0,\n\n  },\n  reducers: {\n    replaceCart(state, action) {\n      state.totalQuantity = action.payload.totalQuantity;\n      state.items = action.payload.items;\n    },\n\n    addItemToCart(state, action) {\n      const newItem = action.payload; //   searching if item we are pushig in to cart already exists\n\n      const existingItem = state.items.find(item => item.id === newItem.id);\n      state.changed = true;\n      state.totalQuantity++;\n\n      if (!existingItem) {\n        state.items.push({\n          id: newItem.id,\n          name: newItem.title,\n          price: newItem.price,\n          quantity: 1,\n          totalPrice: newItem.price\n        });\n      } else {\n        existingItem.quantity += 1;\n        existingItem.totalPrice += newItem.price;\n      }\n    },\n\n    removeItemFromCart(state, action) {\n      const id = action.payload;\n      const existingItem = state.items.find(item => item.id === id);\n      state.totalQuantity--;\n      state.changed = true;\n\n      if (existingItem.quantity === 1) {\n        //   will keep all the items whose id does not matches with the current item id\n        state.items = state.items.filter(item => item.id !== id);\n      } else {\n        existingItem.quantity -= 1;\n        existingItem.totalPrice -= existingItem.price;\n      }\n    }\n\n  }\n});\nexport const sendCartData = cart => {\n  return async dispatch => {\n    dispatch(uiActions.showNotification({\n      status: \"pending\",\n      title: \"Sending\",\n      message: \"Sending cart data\"\n    }));\n\n    const sendRequest = async () => {\n      const response = await fetch(\"https://react-http-32e62-default-rtdb.firebaseio.com/cart.json\", {\n        method: \"PUT\",\n        body: JSON.stringify({\n          items: cart.items,\n          totalQuantity: cart.totalQuantity\n        })\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Sending Cart Data Failed!!!\");\n      }\n    };\n\n    try {\n      await sendRequest();\n      dispatch(uiActions.showNotification({\n        status: \"success\",\n        title: \"Success!\",\n        message: \"Sent cart data successfully!\"\n      }));\n    } catch (error) {\n      dispatch(uiActions.showNotification({\n        status: \"error\",\n        title: \"Error!\",\n        message: \"Sending cart data failed!!!\"\n      }));\n    }\n  };\n};\nexport const fetchCartData = () => {\n  return async dispatch => {\n    const fetchData = async () => {\n      const response = await fetch(\"https://react-http-32e62-default-rtdb.firebaseio.com/cart.json\");\n\n      if (!response.ok) {\n        throw new Error(\"Could not fetch data!\");\n      }\n\n      const data = await response.json();\n      return data;\n    };\n\n    try {\n      const cartData = await fetchData();\n      dispatch(cartActions.replaceCart({\n        items: cartData.items || [],\n        totalQuantity: cartData.totalQuantity\n      }));\n    } catch (error) {\n      dispatch(uiActions.showNotification({\n        status: \"error\",\n        title: \"Error!\",\n        message: \"Fetching cart data failed!!!\"\n      }));\n    }\n  };\n};\nexport const cartActions = cartSlice.actions;\nexport default cartSlice;","map":{"version":3,"sources":["/home/mtech/Documents/ReactJS Training/BookOrderingRedux/src/store/cart-slice.js"],"names":["createSlice","uiActions","cartSlice","name","initialState","items","totalQuantity","changed","reducers","replaceCart","state","action","payload","addItemToCart","newItem","existingItem","find","item","id","push","title","price","quantity","totalPrice","removeItemFromCart","filter","sendCartData","cart","dispatch","showNotification","status","message","sendRequest","response","fetch","method","body","JSON","stringify","ok","Error","error","fetchCartData","fetchData","data","json","cartData","cartActions","actions"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,SAASC,SAAT,QAA0B,YAA1B;AAEA,MAAMC,SAAS,GAAGF,WAAW,CAAC;AAC5BG,EAAAA,IAAI,EAAE,MADsB;AAE5BC,EAAAA,YAAY,EAAE;AACZC,IAAAA,KAAK,EAAE,EADK;AAEZC,IAAAA,aAAa,EAAE,CAFH;AAGZC,IAAAA,OAAO,EAAE,KAHG,CAIZ;;AAJY,GAFc;AAQ5BC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,WAAW,CAACC,KAAD,EAAQC,MAAR,EAAgB;AACzBD,MAAAA,KAAK,CAACJ,aAAN,GAAsBK,MAAM,CAACC,OAAP,CAAeN,aAArC;AACAI,MAAAA,KAAK,CAACL,KAAN,GAAcM,MAAM,CAACC,OAAP,CAAeP,KAA7B;AACD,KAJO;;AAKRQ,IAAAA,aAAa,CAACH,KAAD,EAAQC,MAAR,EAAgB;AAC3B,YAAMG,OAAO,GAAGH,MAAM,CAACC,OAAvB,CAD2B,CAG3B;;AACA,YAAMG,YAAY,GAAGL,KAAK,CAACL,KAAN,CAAYW,IAAZ,CAAkBC,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYJ,OAAO,CAACI,EAA/C,CAArB;AAEAR,MAAAA,KAAK,CAACH,OAAN,GAAgB,IAAhB;AAEAG,MAAAA,KAAK,CAACJ,aAAN;;AAEA,UAAI,CAACS,YAAL,EAAmB;AACjBL,QAAAA,KAAK,CAACL,KAAN,CAAYc,IAAZ,CAAiB;AACfD,UAAAA,EAAE,EAAEJ,OAAO,CAACI,EADG;AAEff,UAAAA,IAAI,EAAEW,OAAO,CAACM,KAFC;AAGfC,UAAAA,KAAK,EAAEP,OAAO,CAACO,KAHA;AAIfC,UAAAA,QAAQ,EAAE,CAJK;AAKfC,UAAAA,UAAU,EAAET,OAAO,CAACO;AALL,SAAjB;AAOD,OARD,MAQO;AACLN,QAAAA,YAAY,CAACO,QAAb,IAAyB,CAAzB;AACAP,QAAAA,YAAY,CAACQ,UAAb,IAA2BT,OAAO,CAACO,KAAnC;AACD;AACF,KA3BO;;AA4BRG,IAAAA,kBAAkB,CAACd,KAAD,EAAQC,MAAR,EAAgB;AAChC,YAAMO,EAAE,GAAGP,MAAM,CAACC,OAAlB;AACA,YAAMG,YAAY,GAAGL,KAAK,CAACL,KAAN,CAAYW,IAAZ,CAAkBC,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYA,EAAvC,CAArB;AACAR,MAAAA,KAAK,CAACJ,aAAN;AACAI,MAAAA,KAAK,CAACH,OAAN,GAAgB,IAAhB;;AAEA,UAAIQ,YAAY,CAACO,QAAb,KAA0B,CAA9B,EAAiC;AAC/B;AACAZ,QAAAA,KAAK,CAACL,KAAN,GAAcK,KAAK,CAACL,KAAN,CAAYoB,MAAZ,CAAoBR,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYA,EAAzC,CAAd;AACD,OAHD,MAGO;AACLH,QAAAA,YAAY,CAACO,QAAb,IAAyB,CAAzB;AACAP,QAAAA,YAAY,CAACQ,UAAb,IAA2BR,YAAY,CAACM,KAAxC;AACD;AACF;;AAzCO;AARkB,CAAD,CAA7B;AAqDA,OAAO,MAAMK,YAAY,GAAIC,IAAD,IAAU;AACpC,SAAO,MAAOC,QAAP,IAAoB;AACzBA,IAAAA,QAAQ,CACN3B,SAAS,CAAC4B,gBAAV,CAA2B;AACzBC,MAAAA,MAAM,EAAE,SADiB;AAEzBV,MAAAA,KAAK,EAAE,SAFkB;AAGzBW,MAAAA,OAAO,EAAE;AAHgB,KAA3B,CADM,CAAR;;AAQA,UAAMC,WAAW,GAAG,YAAY;AAC9B,YAAMC,QAAQ,GAAG,MAAMC,KAAK,CAC1B,gEAD0B,EAE1B;AACEC,QAAAA,MAAM,EAAE,KADV;AAEEC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACjBjC,UAAAA,KAAK,EAAEsB,IAAI,CAACtB,KADK;AAEjBC,UAAAA,aAAa,EAAEqB,IAAI,CAACrB;AAFH,SAAf;AAFR,OAF0B,CAA5B;;AAUA,UAAI,CAAC2B,QAAQ,CAACM,EAAd,EAAkB;AAChB,cAAM,IAAIC,KAAJ,CAAU,6BAAV,CAAN;AACD;AACF,KAdD;;AAgBA,QAAI;AACF,YAAMR,WAAW,EAAjB;AACAJ,MAAAA,QAAQ,CACN3B,SAAS,CAAC4B,gBAAV,CAA2B;AACzBC,QAAAA,MAAM,EAAE,SADiB;AAEzBV,QAAAA,KAAK,EAAE,UAFkB;AAGzBW,QAAAA,OAAO,EAAE;AAHgB,OAA3B,CADM,CAAR;AAOD,KATD,CASE,OAAOU,KAAP,EAAc;AACdb,MAAAA,QAAQ,CACN3B,SAAS,CAAC4B,gBAAV,CAA2B;AACzBC,QAAAA,MAAM,EAAE,OADiB;AAEzBV,QAAAA,KAAK,EAAE,QAFkB;AAGzBW,QAAAA,OAAO,EAAE;AAHgB,OAA3B,CADM,CAAR;AAOD;AACF,GA3CD;AA4CD,CA7CM;AA+CP,OAAO,MAAMW,aAAa,GAAG,MAAM;AACjC,SAAO,MAAOd,QAAP,IAAoB;AACzB,UAAMe,SAAS,GAAG,YAAY;AAC5B,YAAMV,QAAQ,GAAG,MAAMC,KAAK,CAC1B,gEAD0B,CAA5B;;AAIA,UAAI,CAACD,QAAQ,CAACM,EAAd,EAAkB;AAChB,cAAM,IAAIC,KAAJ,CAAU,uBAAV,CAAN;AACD;;AAED,YAAMI,IAAI,GAAG,MAAMX,QAAQ,CAACY,IAAT,EAAnB;AAEA,aAAOD,IAAP;AACD,KAZD;;AAcA,QAAI;AACF,YAAME,QAAQ,GAAG,MAAMH,SAAS,EAAhC;AACAf,MAAAA,QAAQ,CACNmB,WAAW,CAACtC,WAAZ,CAAwB;AACtBJ,QAAAA,KAAK,EAAEyC,QAAQ,CAACzC,KAAT,IAAkB,EADH;AAEtBC,QAAAA,aAAa,EAAEwC,QAAQ,CAACxC;AAFF,OAAxB,CADM,CAAR;AAMD,KARD,CAQE,OAAOmC,KAAP,EAAc;AACdb,MAAAA,QAAQ,CACN3B,SAAS,CAAC4B,gBAAV,CAA2B;AACzBC,QAAAA,MAAM,EAAE,OADiB;AAEzBV,QAAAA,KAAK,EAAE,QAFkB;AAGzBW,QAAAA,OAAO,EAAE;AAHgB,OAA3B,CADM,CAAR;AAOD;AACF,GAhCD;AAiCD,CAlCM;AAoCP,OAAO,MAAMgB,WAAW,GAAG7C,SAAS,CAAC8C,OAA9B;AAEP,eAAe9C,SAAf","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport { uiActions } from \"./ui-slice\";\n\nconst cartSlice = createSlice({\n  name: \"cart\",\n  initialState: {\n    items: [],\n    totalQuantity: 0,\n    changed: false,\n    // totalAmount: 0,\n  },\n  reducers: {\n    replaceCart(state, action) {\n      state.totalQuantity = action.payload.totalQuantity;\n      state.items = action.payload.items;\n    },\n    addItemToCart(state, action) {\n      const newItem = action.payload;\n\n      //   searching if item we are pushig in to cart already exists\n      const existingItem = state.items.find((item) => item.id === newItem.id);\n\n      state.changed = true;\n\n      state.totalQuantity++;\n\n      if (!existingItem) {\n        state.items.push({\n          id: newItem.id,\n          name: newItem.title,\n          price: newItem.price,\n          quantity: 1,\n          totalPrice: newItem.price,\n        });\n      } else {\n        existingItem.quantity += 1;\n        existingItem.totalPrice += newItem.price;\n      }\n    },\n    removeItemFromCart(state, action) {\n      const id = action.payload;\n      const existingItem = state.items.find((item) => item.id === id);\n      state.totalQuantity--;\n      state.changed = true;\n\n      if (existingItem.quantity === 1) {\n        //   will keep all the items whose id does not matches with the current item id\n        state.items = state.items.filter((item) => item.id !== id);\n      } else {\n        existingItem.quantity -= 1;\n        existingItem.totalPrice -= existingItem.price;\n      }\n    },\n  },\n});\n\nexport const sendCartData = (cart) => {\n  return async (dispatch) => {\n    dispatch(\n      uiActions.showNotification({\n        status: \"pending\",\n        title: \"Sending\",\n        message: \"Sending cart data\",\n      })\n    );\n\n    const sendRequest = async () => {\n      const response = await fetch(\n        \"https://react-http-32e62-default-rtdb.firebaseio.com/cart.json\",\n        {\n          method: \"PUT\",\n          body: JSON.stringify({\n              items: cart.items,\n              totalQuantity: cart.totalQuantity,\n          }),\n        }\n      );\n      if (!response.ok) {\n        throw new Error(\"Sending Cart Data Failed!!!\");\n      }\n    };\n\n    try {\n      await sendRequest();\n      dispatch(\n        uiActions.showNotification({\n          status: \"success\",\n          title: \"Success!\",\n          message: \"Sent cart data successfully!\",\n        })\n      );\n    } catch (error) {\n      dispatch(\n        uiActions.showNotification({\n          status: \"error\",\n          title: \"Error!\",\n          message: \"Sending cart data failed!!!\",\n        })\n      );\n    }\n  };\n};\n\nexport const fetchCartData = () => {\n  return async (dispatch) => {\n    const fetchData = async () => {\n      const response = await fetch(\n        \"https://react-http-32e62-default-rtdb.firebaseio.com/cart.json\"\n      );\n\n      if (!response.ok) {\n        throw new Error(\"Could not fetch data!\");\n      }\n\n      const data = await response.json();\n\n      return data;\n    };\n\n    try {\n      const cartData = await fetchData();\n      dispatch(\n        cartActions.replaceCart({\n          items: cartData.items || [],\n          totalQuantity: cartData.totalQuantity,\n        })\n      );\n    } catch (error) {\n      dispatch(\n        uiActions.showNotification({\n          status: \"error\",\n          title: \"Error!\",\n          message: \"Fetching cart data failed!!!\",\n        })\n      );\n    }\n  };\n};\n\nexport const cartActions = cartSlice.actions;\n\nexport default cartSlice;\n"]},"metadata":{},"sourceType":"module"}