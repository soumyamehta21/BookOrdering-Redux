{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst cartSlice = createSlice({\n  name: \"cart\",\n  initialState: {\n    items: [],\n    totalQuantity: 0 // totalAmount: 0,\n\n  },\n  reducers: {\n    addItemToCart(state, action) {\n      const newItem = action.payload; //   searching if item we are pushig in to cart already exists\n\n      const existingItem = state.items.find(item => item.id === newItem.id);\n      state.totalQuantity++;\n\n      if (!existingItem) {\n        state.items.push({\n          id: newItem.id,\n          name: newItem.title,\n          price: newItem.price,\n          quantity: 1,\n          totalPrice: newItem.price\n        });\n      } else {\n        existingItem.quantity += 1;\n        existingItem.totalPrice += newItem.price;\n      }\n    },\n\n    removeItemFromCart(state, action) {\n      const id = action.payload;\n      const existingItem = state.items.find(item => item.id === id);\n      state.totalQuantity--;\n\n      if (existingItem.quantity === 1) {\n        //   will keep all the items whose id does not matches with the current item id\n        state.items = state.items.filter(item => item.id !== id);\n      } else {\n        existingItem.quantity -= 1;\n        existingItem.totalPrice -= existingItem.price;\n      }\n    }\n\n  }\n});\n\nconst sendCartData = cart => {\n  return () => {\n    const sendCartData = async () => {\n      dispatch(uiActions.showNotification({\n        status: \"pending\",\n        title: \"Sending\",\n        message: \"Sending cart data\"\n      }));\n      const response = await fetch(\"https://react-http-32e62-default-rtdb.firebaseio.com/cart.json\", {\n        method: \"PUT\",\n        body: JSON.stringify(cart)\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Sending Cart Data Failed!!!\");\n      } // const data = await response.json();\n\n\n      dispatch(uiActions.showNotification({\n        status: \"success\",\n        title: \"Success!\",\n        message: \"Sent cart data successfully!\"\n      }));\n    };\n\n    if (isInitial) {\n      isInitial = false;\n      return;\n    }\n\n    sendCartData().catch(error => dispatch(uiActions.showNotification({\n      status: \"error\",\n      title: \"Error!\",\n      message: \"Sending cart data failed!!!\"\n    })));\n  };\n};\n\nexport const cartActions = cartSlice.actions;\nexport default cartSlice;","map":{"version":3,"sources":["/home/mtech/Documents/ReactJS Training/MealOrderingRedux/src/store/cart-slice.js"],"names":["createSlice","cartSlice","name","initialState","items","totalQuantity","reducers","addItemToCart","state","action","newItem","payload","existingItem","find","item","id","push","title","price","quantity","totalPrice","removeItemFromCart","filter","sendCartData","cart","dispatch","uiActions","showNotification","status","message","response","fetch","method","body","JSON","stringify","ok","Error","isInitial","catch","error","cartActions","actions"],"mappings":"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","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nconst cartSlice = createSlice({\n  name: \"cart\",\n  initialState: {\n    items: [],\n    totalQuantity: 0,\n    // totalAmount: 0,\n  },\n  reducers: {\n    addItemToCart(state, action) {\n      const newItem = action.payload;\n\n      //   searching if item we are pushig in to cart already exists\n      const existingItem = state.items.find((item) => item.id === newItem.id);\n\n      state.totalQuantity++;\n\n      if (!existingItem) {\n        state.items.push({\n          id: newItem.id,\n          name: newItem.title,\n          price: newItem.price,\n          quantity: 1,\n          totalPrice: newItem.price,\n        });\n      } else {\n        existingItem.quantity += 1;\n        existingItem.totalPrice += newItem.price;\n      }\n    },\n    removeItemFromCart(state, action) {\n      const id = action.payload;\n      const existingItem = state.items.find((item) => item.id === id);\n      state.totalQuantity--;\n\n      if (existingItem.quantity === 1) {\n        //   will keep all the items whose id does not matches with the current item id\n        state.items = state.items.filter((item) => item.id !== id);\n      } else {\n        existingItem.quantity -= 1;\n        existingItem.totalPrice -= existingItem.price;\n      }\n    },\n  },\n});\n\nconst sendCartData = (cart) => {\n  return () => {\n    const sendCartData = async () => {\n      dispatch(\n        uiActions.showNotification({\n          status: \"pending\",\n          title: \"Sending\",\n          message: \"Sending cart data\",\n        })\n      );\n      const response = await fetch(\n        \"https://react-http-32e62-default-rtdb.firebaseio.com/cart.json\",\n        {\n          method: \"PUT\",\n          body: JSON.stringify(cart),\n        }\n      );\n      if (!response.ok) {\n        throw new Error(\"Sending Cart Data Failed!!!\");\n      }\n\n      // const data = await response.json();\n      dispatch(\n        uiActions.showNotification({\n          status: \"success\",\n          title: \"Success!\",\n          message: \"Sent cart data successfully!\",\n        })\n      );\n    };\n\n    if (isInitial) {\n      isInitial = false;\n      return;\n    }\n\n    sendCartData().catch((error) =>\n      dispatch(\n        uiActions.showNotification({\n          status: \"error\",\n          title: \"Error!\",\n          message: \"Sending cart data failed!!!\",\n        })\n      )\n    );\n  };\n};\n\nexport const cartActions = cartSlice.actions;\n\nexport default cartSlice;\n"]},"metadata":{},"sourceType":"module"}